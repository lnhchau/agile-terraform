name: Azure Pipelines

trigger:
  - main

pool: agentPool

variables:
  System.Debug: true
  python.version: '3.7.6'
  azureServiceConnectionId: "78a4f072-8a90-4d5e-af97-b2095156fe11"
  storagetAccountName: "tfstate195443015"
  resourceGroupName: "Azuredevops"
  webAppName: "myapp-AppService"
  projectRoot: "$(System.DefaultWorkingDirectory)"
  environmentName: "test"

stages:
  - stage: Provisioning
    displayName: Provisioning Stage

    jobs:
      - job: ProvisioningTerraform
        pool: agentPool
        displayName: Provisioning - Terraform
        steps:
          - task: DownloadSecureFile@1
            displayName: "Download backend.conf file"
            name: backendconf
            inputs:
              secureFile: "backend.conf"

          - task: Bash@3
            displayName: "Copy backend.conf file"
            inputs:
              targetType: "inline"
              script: |
                #!/bin/bash
                echo "DEBUG: Backend file path: $(backendconf.secureFilePath)"
                ls -l "$(backendconf.secureFilePath)" || echo "DEBUG: Backend config file not found!"
                sudo cp "$(backendconf.secureFilePath)" terraform/environments/test/backend.conf
                ls -l terraform/environments/test/backend.conf || echo "DEBUG: Copy operation failed!"

          - task: DownloadSecureFile@1
            displayName: "Download terraform.tfvars file"
            name: tfvars
            inputs:
              secureFile: "terraform.tfvars"

          - task: Bash@3
            displayName: "Copy terraform.tfvars file"
            inputs:
              targetType: "inline"
              script: |
                #!/bin/bash
                sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars

          - task: DownloadSecureFile@1
            displayName: "Download id_rsa.pub file"
            name: id_rsa
            inputs:
              secureFile: "id_rsa.pub"

          - task: Bash@3
            displayName: "Copy id_rsa.pub file"
            inputs:
              targetType: "inline"
              script: |
                #!/bin/bash
                sudo cp $(id_rsa.secureFilePath) terraform/environments/test/id_rsa.pub

          # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
          # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
          # Install public key and private key file to the pipeline agent, using the task below.
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" # variable value
              sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC+3vCmC/WMZH3BN4VPgCOODt5MProB6ggBEIO1v+TiTtrZKYGL6kqT/cJiu9y9ArHRfa8JMLt+JNztiCDCRmboK/1DA8UV/z2kFRwUG9DKu8rSNwQAWDD2zr3/9ipN+ziHkknO/dTN++Sq2g1x8CtCkIacyTwzVZ7ICJuQKdLMdVZB3ZF5IcLpsTteGbVFoRMZOvu5rN3sWonwPmHuu12tezBUtddZcl4mQ1EeDOjEVhZoTo2snCmbXWJxDGlDliQSIGb7mAbmGlVPuESYDLCNni892JWtQOIa0QzgmQEsBEURHHoarMu3olSGBpfZa5srfhEYSmq9Q/xCKOn0LrOmxBoQPUZiQ/wuEcBtl9lYEtdEuJh+LBeeFJOY8/ZKxb5a2O/lsXyH6KYW8Crsd5PutIqzhWH+Blonl47GYcBcj6dxCK27xJge4drIxWNCx3b6j/CIzevAPJn6YO5C0XnWyRoiJBLpdjAEwZusaeFyL8e51ZKxneYvHeg2qN2QOrE= acer@LAPTOP-NOIATE85" # variable value
              sshKeySecureFile: "id_rsa" # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

          # - task: Bash@3
          #   displayName: "Log Environment Variables"
          #   inputs:
          #     targetType: "inline"
          #     script: |
          #       echo "DEBUG: Environment Variables"
          #       env | grep -i "azure\|terraform\|System"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.2.9' # 'latest' # '1.10.2' # '1.2.9' # '1.10.2' # '0.14.7'

          #--------------------------------------------#
          # # Step 2: Terraform Init
          # - script: |
          #     echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(ARM_ACCESS_KEY)"
          #   displayName: "Set ARM_ACCESS_KEY for Terraform"

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terrafom init"
            inputs:
              provider: "azurerm"
              command: "init"
              commandOptions: '-backend-config=backend.conf'
              workingDirectory: "$(projectRoot)/terraform/environments/test"
              backendServiceArm: "$(azureServiceConnectionId)"
              backendAzureRmResourceGroupName: "Azuredevops"
              backendAzureRmStorageAccountName: "$(storagetAccountName)"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "test.terraform.tfstate"
            # env:
            #   TF_LOG: DEBUG
            #   TF_LOG_PATH: "$(projectRoot)/terraform/environments/test/tf-init-debug.log"

          # Step 3: Terraform Validate
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: "Terraform Validate"
            inputs:
              workingDirectory: "$(projectRoot)/terraform/environments/test"
              provider: "azurerm"
              command: "validate"
            # env:
            #   TF_LOG: DEBUG
            #   TF_LOG_PATH: "$(projectRoot)/terraform/environments/test/tf-validate-debug.log"

          - task: TerraformTaskV3@3
            displayName: "Terraform plan"
            inputs:
              provider: "azurerm"
              command: "plan"
              workingDirectory: "$(projectRoot)/terraform/environments/test/"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
            # env:
            #   TF_LOG: DEBUG
            #   TF_LOG_PATH: "$(projectRoot)/terraform/environments/test/tf-plan-debug.log"

          # Step 4: Terraform Apply
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
            displayName: Terraform apply
            inputs:
              provider: "azurerm"
              command: "apply"
              workingDirectory: "$(projectRoot)/terraform/environments/test/"
              environmentServiceNameAzureRM: "$(azureServiceConnectionId)"

  #--------------------------------------------#
  # BUILD STAGE
  #--------------------------------------------#
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        steps:
          #--------------------------------------------#
          # FakeRestAPI - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: 'Archive FakeRestAPI'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
            displayName: 'Upload Package'
            artifact: drop-fakerestapi

          #--------------------------------------------#
          # Selenium (UI) Test Suite - Archive the package
          # "ArchiveFiles@2" picks up the web package and archives it.
          - task: ArchiveFiles@2
            displayName: 'Archive UI Tests'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
          # Selenium Test Suite - Publish the package
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
            displayName: 'Upload Package'
            artifact: drop-uitests

          #--------------------------------------------#
          # JMeter (Performance) Test Suite - Archive
          # ToDo: Complete the ArchiveFiles@2 task and publish step
          - task: ArchiveFiles@2
            displayName: 'Archive PerformanceTestSuite'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
          # JMeter Test Suite - Publish    
          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
            displayName: 'Upload Package'
            artifact: drop-perftests

          # #--------------------------------------------#
          # - task: ArchiveFiles@2
          #   displayName: 'Archive Postman Tests'
          #   inputs:
          #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
          #     includeRootFolder: false
          #     archiveType: 'zip'
          #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman.zip'

          # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman.zip
          #   displayName: 'Upload Postman Tests'
          #   artifact: drop-postman


  #--------------------------------------------#
  # DEPLOYMENT
  #--------------------------------------------#
  - stage: Deployment
    displayName: Deployment Stage
    jobs:
      - deployment: FakeRestAPI
        pool: agentPool
        displayName: "Deploy FakeRestAPI to VM"
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: "Deploy: Azure Web App"
                  inputs:
                    azureSubscription: $(azureServiceConnectionId)
                    appName: $(webAppName)
                    appType: "webApp"
                    # resourceGroupName: $(resourceGroupName)
                    package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
                    deploymentMethod: auto

                #--------------------------------------------#
                # Run JMeter test suite against the App Service
                - task: CmdLine@2
                  displayName: "Run JMeter test suite against the App Service"
                  inputs:
                    script: |
                      sudo apt-get upgrade -y
                      sudo apt-get install openjdk-11-jdk -y
                      sudo apt-get install openjdk-11-jre-headless -y
                      export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/
                      wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                      tar -xf apache-jmeter-5.6.3.tgz
                      unzip -o $(Build.BuildId)-perftests.zip
                      pwd
                      ls -la
                      # Ensure directories exist
                      mkdir -p $(Pipeline.Workspace)/drop-perftests/jmeter-performance-html-report
                      mkdir -p $(Pipeline.Workspace)/drop-perftests/jmeter-stress-html-report

                      echo "Performing Endurance test."
                      ./apache-jmeter-5.6.3/bin/jmeter -n -t PerformanceTestSuite.jmx \
                                                      -l performance-test-result.csv \
                                                      -e -f -o jmeter-performance-html-report \
                                                      -j jmeter-performance.log
                      echo "Performing Stress test."
                      ./apache-jmeter-5.6.3/bin/jmeter -n -t StressTest.jmx \
                                                      -l stress-test-result.csv \
                                                      -e -f -o jmeter-stress-html-report \
                                                      -j jmeter-stress.log

                      # Debug output
                      echo "Files generated:"
                      ls -la $(Pipeline.Workspace)/drop-perftests
                      cat jmeter-performance.log
                                                              
                    workingDirectory: $(Pipeline.Workspace)/drop-perftests            # ToDo: Use the artifact name from the task above

                # Archive and publish JMeter performance reports
                - task: ArchiveFiles@2
                  displayName: 'Archive JMeter Performance Report'
                  inputs:
                    rootFolderOrFile: '/home/chaulnh/myagent/_work/1/drop-perftests/jmeter-performance-html-report'
                    includeRootFolder: false
                    archiveType: 'zip'
                    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-performance-html-report.zip'
                    replaceExistingArchive: true

                - task: ArchiveFiles@2
                  displayName: 'Archive JMeter Stress Test Report'
                  inputs:
                    rootFolderOrFile: '/home/chaulnh/myagent/_work/1/drop-perftests/jmeter-stress-html-report'
                    includeRootFolder: false
                    archiveType: 'zip'
                    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-stress-html-report.zip'

                # JMeter report - Publish
                # - task: PublishPipelineArtifact@1
                  # displayName: 'Publish JMeter logs'
                  # inputs:
                    # targetPath: '$(System.DefaultWorkingDirectory)'
                    # artifact: drop-jmeter-report

                # JMeter report - Publish
                - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-performance-html-report.zip
                  displayName: 'Upload Package JMeter Performance Report'
                  artifact: drop-jmeter-performance-report

                # JMeter report - Publish
                - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-stress-html-report.zip
                  displayName: 'Upload Package JMeter Stress Report'
                  artifact: drop-jmeter-stress-report
        

      #--------------------------------------------#
      # Selenium | Functional UI Tests
      # ToDo:
      - deployment: VMDeploy
        displayName: Deploy VM for Selenium Tests
        environment:
          name: 'test'       # ToDo: Change/provide a name
          resourceType: VirtualMachine
          tags: selenium      
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: drop-uitests    # ToDo: Change/provide a name

              - task: Bash@3
                inputs:
                  targetType: 'inline'
                  script: |       
                    #! /bin/bash
                    
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    pip3 install selenium
                    cd ~/
                    DIR=/home/chaulnh/app
                    if [ ! -d "$DIR" ]; then
                        mkdir app
                    fi
                    mv /home/chaulnh/myagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                    cd app
                    unzip -o $(Build.BuildId)-uitests.zip

                    wget https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.58/linux64/chromedriver-linux64.zip
                    unzip -o chromedriver-linux64.zip
                    sudo cp chromedriver-linux64/chromedriver /usr/local/bin/
                    
                    export PATH=$PATH:/home/chaulnh/app
                    echo "Starting Selenium Tests"
                    python3 login.py >> selenium.log
                    
                    echo "Completed Selenium Tests. Check selenium.log for results."
                    cat selenium.log

                    # Create the directory if it doesn't exist
                    if [ ! -d "/var/log/selenium" ]; then
                      sudo mkdir -p /var/log/selenium
                    fi

                    # Set permissions for the directory
                    sudo chmod 664 /var/log/selenium

                    # Copy the log file, overwrite if it exists
                    sudo cp -f selenium.log /var/log/selenium/selenium.log
                    
                    # create new directory 
                    mkdir -p $(System.DefaultWorkingDirectory)/log/selenium
                    sudo cp -f selenium.log $(System.DefaultWorkingDirectory)/log/selenium

                    # Display the log file directory
                    echo 'Directory'
                    pwd
                    echo 'find selenium.log in'
                    find . -name selenium.log
                    
              - task: PublishPipelineArtifact@1
                displayName: Publish selenium logs
                inputs:
                  targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium.log'
                  artifactName: 'drop-selenium-logs'
          

  #--------------------------------------------#
  # TEST STAGE
  #--------------------------------------------#
  - stage: Test
    jobs:

      - job: PostmanTest
        pool: agentPool
        displayName: Run Postman Tests
        steps:
        # - download: current
        #   artifact: drop-postman
        #   displayName: 'Download Postman Tests'

        # # Optional: Debugging step to confirm the files are downloaded
        # - task: Bash@3
        #   displayName: 'Verify Postman Files'
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       echo "Checking Postman files..."
        #       ls -la $(projectRoot)/automatedtesting/postman

        # - task: Bash@3
        #   displayName: "Create Postman Directory"
        #   inputs:
        #     targetType: "inline"
        #     script: |
        #       mkdir -p $(projectRoot)/automatedtesting/postman

        - task: Bash@3
          displayName: Install Node.js and npm
          inputs:
            targetType: 'inline'
            script: |
              sudo apt-get update -y
              sudo apt-get install curl -y
              curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs

        # Postman - Install Newman
        - task: CmdLine@2
          displayName: Install Newman
          inputs:
            targetType: "inline"
            script: "sudo npm install -g newman"
            workingDirectory: '$(projectRoot)/automatedtesting/postman'

      
        # Postman Data Validation Test Suite
        - task: CmdLine@2
          displayName: Run Data Validation Tests
          continueOnError: true
          inputs:
            script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
            workingDirectory: "$(projectRoot)/automatedtesting/postman"

        # Postman Regression Test Suite
        # ToDo: Verify the working directory
        - task: Bash@3
          displayName: Run Regression Tests
          continueOnError: true
          inputs:
            targetType: "inline"
            script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
            workingDirectory: "$(projectRoot)/automatedtesting/postman"

        # - task: PublishPipelineArtifact@1
        #   displayName: Publish Postman Test Result
        #   inputs:
        #     targetPath: '$(projectRoot)/automatedtesting/postman/results'
        #     artifactName: 'drop-postman-result'

        # Postman - Publish Results
        # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: "$(projectRoot)/automatedtesting/postman" #/results
            mergeTestResults: true
            testRunTitle: "Regression and validation test results" # ToDo


  #     - job: test_jmeter
  #       displayName: Run JMeter Tests
  #       steps:
  #         #--------------------------------------------#
  #         # Run JMeter test suite against the App Service
  #         - task: Bash@3
  #           displayName: Install JMeter
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               sudo apt-get install openjdk-11-jre-headless -y
  #               java -version
  #               wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.tgz -O jmeter.tgz
  #               tar xzvf jmeter.tgz
  #               apache-jmeter-5.6/bin/jmeter --version
  #               # create log directory
  #               mkdir -p log/jmeter
  #               pwd
  #               ls -la

  #         - task: Bash@3
  #           displayName: Run JMeter Endurance Test
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               ./apache-jmeter-5.6/bin/jmeter -n -t $(projectRoot)/automatedtesting/jmeter/EnduranceTestSuite.jmx \
  #               -l log/jmeter/endurance-test.csv \
  #               -j log/jmeter/endurance-test.log -e -f \
  #               -o log/jmeter/endurance-test-report-html

  #         - task: Bash@3
  #           displayName: Run JMeter Stress Test
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               ./apache-jmeter-5.6/bin/jmeter -n -t $(projectRoot)/automatedtesting/jmeter/StressTestSuite.jmx \
  #               -l log/jmeter/stress-test.csv \
  #               -j log/jmeter/stress-test.log -e -f \
  #               -o log/jmeter/stress-test-report-html

  #         #--------------------------------------------#
  #         # JMeter (Performance) Test Suite - Archive
  #         # ToDo: Complete the ArchiveFiles@2 task and publish step
  #         - task: ArchiveFiles@2
  #           displayName: "Archive Stress Test Report"
  #           inputs:
  #             rootFolderOrFile: "$(projectRoot)/log/jmeter/stress-test-report-html"
  #             includeRootFolder: false
  #             archiveType: "zip"
  #             archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-stress-test-report-html.zip"

  #         - task: ArchiveFiles@2
  #           displayName: "Archive Endurance Test Report"
  #           inputs:
  #             rootFolderOrFile: "$(projectRoot)/log/jmeter/endurance-test-report-html"
  #             includeRootFolder: false
  #             archiveType: "zip"
  #             archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-endurance-test-report-html.zip"

  #         - task: PublishPipelineArtifact@1
  #           displayName: Publish JMeter logs
  #           inputs:
  #             targetPath: '$(projectRoot)/log/jmeter'
  #             artifactName: 'drop-jmeter-logs'

  # - stage: SeleniumTest
  #   displayName: UI Tests with Selenium
  #   jobs:
  #     - deployment: test_selenium
  #       displayName: Run Selenium Tests
  #       environment:
  #         name: $(environmentName)
  #         resourceType: VirtualMachine
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - download: current
  #                 displayName: "Download selenium artifact"
  #                 artifact: drop-ui-tests
  #               - task: Bash@3
  #                 displayName: Selenium Tests
  #                 inputs:
  #                   targetType: "inline"
  #                   script: |
  #                     unzip -o $(Pipeline.Workspace)/drop-ui-tests/$(Build.BuildId)-ui-tests.zip -d .
  #                     sudo mkdir -p /var/log/selenium
  #                     sudo chmod 664 /var/log/selenium
                      
  #                     sudo python3 -u ui-tests.py 2>&1 | sudo tee -a /var/log/selenium/selenium.log
  #                     # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
  #                     cd $(System.DefaultWorkingDirectory)
  #                     mkdir -p log/selenium
  #                     pwd
  #                     sudo cp /var/log/selenium/selenium.log log/selenium/selenium.log
  #                     ls -la

  #               - task: PublishPipelineArtifact@1
  #                 displayName: Publish selenium logs
  #                 inputs:
  #                   targetPath: '$(projectRoot)/log/selenium/selenium.log'
  #                   artifactName: 'drop-selenium-logs'