name: Azure Pipelines
variables:
  # Azure Resource Manager service connection for pipelines
  azureServiceConnectionId: '56c6ad79-ac49-4a86-bcb0-f917400c55cf'

  # Python version: 3.9.12
  python.version: '3.9.12'

  # Agent VM image name
  vmImageName: 'myPackerImage'

  # Web app name
  webAppName: 'Azuredevops-app-AppService'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Infrastructure
    pool:
      vmImage: ubuntu-20.04
    steps:

    - task: Bash@3
      displayName: 'Install: Postman & Newman'
      inputs:

        targetType: inline
        script: |
          sudo snap install postman
          sudo npm install -g newman

      # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '52.170.208.68 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIFfa5uGyWkcWFmGvn6iO0WZFX57CP1W6eFdDjb9JryY'
        sshPublicKey: '$(udacityPubKey)' # Define on Azure pipeline
        sshKeySecureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: udacity_public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'id_rsa.pub'
        
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '0.14.7'

    - task: TerraformTaskV1@0
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        backendServiceArm: 'azServiceConnection'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate315883505'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform-project3.tfstate'

    - task: TerraformTaskV1@0
      displayName: 'Deploy: Cloud Infrastructure'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
        commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'azServiceConnection'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload: FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/functionTest.py
      displayName: 'Upload: UI Tests definition'
      artifact: drop-ui-tests

- stage: Deploy
  displayName: Deploy Stage
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy FakeRestAPI to VM'
    pool:
      vmImage: ubuntu-20.04
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy: Azure Web App'
              inputs:
                azureSubscription: 'azServiceConnection'
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

- stage: Tests
  displayName: Test Stage
  jobs:

  - job: Integration
    displayName: 'Integration Tests Suite'
    pool:
      vmImage: ubuntu-20.04
    steps:

    - task: Bash@3
      displayName: 'Install: Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          pwd
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      

    - task: Bash@3
      displayName: 'Run: Regression Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run RegressionTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportRegression.xml

    - task: Bash@3
      displayName: 'Run: Data Validation Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run ValidationTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportValidation.xml

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/JUnitReport*.xml'
        testRunTitle: 'Publish test results'
        searchFolder: 'automatedtesting/postman'

  - job: Performance
    displayName: 'Performance Tests Suite'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:

    - task: JMeterInstaller@0
      displayName: 'Install JMeter'
      inputs:
        jmeterVersion: '5.2.1'
    
    - task: Bash@3
      displayName: 'Run: Endurance Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/EnduranceTest.jmx \
            -l endurance-test-report/endurance-results.jtl \
            -e \
            -o endurance-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish: Endurance Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'    

    - task: Bash@3
      displayName: 'Stress Test Suite'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n \
            -t automatedtesting/jmeter/StressTest.jmx \
            -l stress-test-report/stress-results.jtl \
            -e \
            -o stress-test-report

    - task: publishhtmlreport@1
      displayName: 'Publish: Stress Test Results'
      inputs:
        htmlType: 'Jmeter'
        JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'    
        
        
    - task: Bash@3
      displayName: 'Print: Performance Test Logs'
      inputs:
        targetType: 'inline'
        script: |
          ls -lah endurance-test-report/
          ls -lah stress-test-report/
          cat jmeter.log        

  - deployment: Functional
    displayName: 'Functional UI Tests Suite'
    environment:
      name:  'test'
      resourceType: VirtualMachine
      tags: test, packer-created-vm
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: drop-ui-tests

          - task: Bash@3

            displayName: 'Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                echo 'Hello from a custom VM with pre-installed Selenium, Chromium-browser & Chromedriver!'
                source env/bin/activate
                export PATH=$PATH:`pwd` # add chromedriver executable to path
                python3 ../drop-ui-tests/functionTest.py
                cat selenium.log