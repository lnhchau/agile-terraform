name: Azure Pipelines
variables:
  azureServiceConnectionId: '352fc713-b111-4214-b984-1e0aacaf8872'
  storagetAccountName: 'tfstate357223227'
  resourceGroupName: 'Azuredevops'
  python.version: '3.9.12'
  vmImageName: 'myPackerImage'
  webAppName: 'myapp-AppService'
  projectRoot: "$(System.DefaultWorkingDirectory)"
  environmentName: 'test'
  udacityPubKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCyAGIa5DYTn06/jxxZQzHGCd9MuEX81uXea/Wmshvsy+4XWcYrOtXyjomNrj56ivOg9TVoi3T60JHW6Mm6X6d7rz3n1ZmiC1Iwv6QWibsmukZxzQrZDxM4kgxZ2GMoonQawc1ozBkTAQGivvI1ZcT4xhUZdKVaFiAZjiNcTJAWYzlqL53BNsvelJQaccv4KhXuzg3kXecMus84oGlj4O6ZStjoo2n2sARGJABuvATwvEqbl0y2or6XRF05SirdoovtiHGZbQrWA6NSxoJYmbSHT4V2T+sw9fAcfTyUsqGKmpbTGg4Ys36mPkyDgB+SCVsKv+eNVeiS3cEGOHQRIDcdiQE2YrjL/38DgnTIfzuOgZUST6QJ/j75POfgZwNdRZDCDz79WN3/VuLhRFkHskLiAGfta9uLFG0RLC+q0nZxo2TVCaaC4YnK+SHfskdKeJ5IwZE9wxkszlYbFWQBDipxgk7z9CABpdTmuxSZUoFJxhDdf+9s902JBrjC2g8EYtLzKWbojV5HrQnrWCSDTO8n9Gb5/UKo6M7ENqBaua4CCiFrg4Ns8nCcCciEJeHg2+wxSaR/qmAIsghjRwuHJXTXymy8wvNpq3JZbS7KEhGsz7snjxhzswac3dhsqSjXbSBqQIc2H8f5FkuKZfhBDDZzjQJcr93HYlEEbsMPqCqnsw== odl_user_271120@udacityhol.onmicrosoft.com'

stages:
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Infrastructure
    pool: agentPool  # Corrected to use custom agent pool
    steps:
    - task: Bash@3
      displayName: 'Install: Node.js and npm'
      inputs:
        targetType: 'inline'
        script: |
          sudo apt update
          sudo apt install -y nodejs
          sudo apt install -y npm
          sudo apt install python3-apt -y
          node -v   # Check Node.js version
          npm -v    # Check npm version

    - task: Bash@3
      displayName: 'Install: Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          sudo snap install postman
          sudo npm install -g newman

    - task: InstallSSHKey@0
      displayName: 'Install SSH Key'
      inputs:
        sshKeySecureFile: 'id_rsa'
        sshPublicKey: '$(udacityPubKey)'
        knownHostsEntry: 'AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBI5h2HIc9VOyWFwF/mfH3mul/1DW5rSr6mBK4jHnsFwvkv75Dcx57tEl1z8J/J3FpS2djQIiFZFFGRUZodqsAFI='

    - task: DownloadSecureFile@1
      name: public_key
      displayName: 'Download Public Key'
      inputs:
        secureFile: 'id_rsa.pub'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.10.2' # '0.14.7'

    - task: Bash@3
      displayName: 'Debug Working Directory and Terraform'
      inputs:
        targetType: 'inline'
        script: |
          echo "Terraform Path: $(which terraform)"
          echo "Terraform Version:"
          terraform -version
          ls -la /home/chaulnh/myagent/_work/_tool/terraform/1.2.9/x64/

    - task: Bash@3
      displayName: 'Set Terraform PATH'
      inputs:
        targetType: 'inline'
        script: |
          export PATH=/home/chaulnh/myagent/_work/_tool/terraform/1.2.9/x64:$PATH
          echo $PATH
          terraform -version

    # Step 2: Terraform Init
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroupName)'
        backendAzureRmStorageAccountName: '$(storagetAccountName)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Step 3: Terraform Validate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # Step 4: Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        # commandOptions: '-var "public_key_path=$(udacity_public_key.secureFilePath)"'
        environmentServiceNameAzureRM: 'azServiceConnection'

    # # Postman Regression Test Suite    
    # # ToDo: Verify the working directory
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # # Postman - Publish Results 
    # # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/TEST-*.xml'
    #     searchFolder:       # ToDo
    #     mergeTestResults: true
    #     testRunTitle:       # ToDo
        
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload: FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/functionTest.py
      displayName: 'Upload: UI Tests definition'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

- stage: Deploy
  displayName: Deploy Stage
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy FakeRestAPI to VM'
    pool: agentPool  # Custom agent pool
    environment: test
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy: Azure Web App'
              inputs:
                azureSubscription: 'azServiceConnection'
                appName: $(webAppName)
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

- stage: Tests
  displayName: Test Stage
  jobs:
  - job: Integration
    displayName: 'Integration Tests Suite'
    pool: agentPool
    steps:
    - task: Bash@3
      displayName: 'Install: Postman & Newman'
      inputs:
        targetType: 'inline'
        script: |
          sudo snap install postman
          sudo npm install -g newman
          sudo npm install newman-reporter-junitfull -g      
        
    #--------------------------------------------#
    # Postman Tests Suite    
    # ToDo: Run Regression Tests Suite
    - task: Bash@3
      displayName: 'Run: Regression Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run RegressionTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportRegression.xml

    # ToDo: Run Data Validation Tests Suite
    - task: Bash@3
      displayName: 'Run: Data Validation Tests'
      inputs:
        workingDirectory: 'automatedtesting/postman'
        targetType: 'inline'
        script: |
          #! /bin/bash

          newman run ValidationTest.json \
            -e MyEnv.json \
            -r cli,junitfull \
            --reporter-junitfull-export JUnitReportValidation.xml

    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/JUnitReport*.xml'
        testRunTitle: 'Publish test results'
        searchFolder: 'automatedtesting/postman'

    #--------------------------------------------#
    # JMeter Test Suite    
    # ToDo: Run Performance Tests Suite
  - job: Performance
    displayName: 'Performance Tests Suite'
    pool: agentPool
    steps:

    #--------------------------------------------#    
    # Run JMeter test suite against the App Service
    - task: CmdLine@2
      displayName: 'Setup JMeter and Run Performance Tests'
      inputs:
        script: |
          # Download and extract JMeter
          wget "https://apache.mirrors.lucidnetworks.net//jmeter/binaries/apache-jmeter-5.2.1.tgz"
          tar -xf apache-jmeter-5.2.1.tgz

          # Extract Performance Test artifacts
          unzip -o $(Build.BuildId)-perftests.zip

          # Run Stress Test
          ./apache-jmeter-5.2.1/bin/jmeter -n -t StressTest.jmx -j stress-test-report/stress-results.jtl -f
          cat stress-test-report/stress-results.jtl

          # Run Endurance Test
          ./apache-jmeter-5.2.1/bin/jmeter -n -t EnduranceTest.jmx -j endurance-test-report/endurance-results.jtl -f
          cat endurance-test-report/endurance-results.jtl

        workingDirectory: $(Pipeline.Workspace)/drop-fakerestapi

    # # Run Endurance Tests Suite
    # - task: CmdLine@2
    #   displayName: 'Run: Endurance Test Suite'
    #   inputs:
    #     script: |
    #       # Run Endurance Test
    #       ./apache-jmeter-5.2.1/bin/jmeter -n \
    #         -t automatedtesting/jmeter/EnduranceTest.jmx \
    #         -l endurance-test-report/endurance-results.jtl \
    #         -e \
    #         -o endurance-test-report
    #     workingDirectory: $(Pipeline.Workspace)/drop-fakerestapi

    # # Publish Endurance Test Results
    # - task: publishhtmlreport@1
    #   displayName: 'Publish: Endurance Test Results'
    #   inputs:
    #     htmlType: 'Jmeter'
    #     JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'

    # # Run Stress Test Suite
    # - task: CmdLine@2
    #   displayName: 'Run: Stress Test Suite'
    #   inputs:
    #     script: |
    #       ./apache-jmeter-5.2.1/bin/jmeter -n \
    #         -t automatedtesting/jmeter/StressTest.jmx \
    #         -l stress-test-report/stress-results.jtl \
    #         -e \
    #         -o stress-test-report
    #     workingDirectory: $(Pipeline.Workspace)/drop-fakerestapi

    # # Publish Stress Test Results
    # - task: publishhtmlreport@1
    #   displayName: 'Publish: Stress Test Results'
    #   inputs:
    #     htmlType: 'Jmeter'
    #     JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'

    # # Print Performance Test Logs
    # - task: CmdLine@2
    #   displayName: 'Print: Performance Test Logs'
    #   inputs:
    #     script: |
    #       ls -lah endurance-test-report/
    #       ls -lah stress-test-report/
    #       cat stress-test-report/stress-results.jtl

  - deployment: Functional
    displayName: 'Functional UI Tests Suite'
    environment: 
      name: test
      resourceType: VirtualMachine
      tags: test, packer-created-vm
    strategy:
      runOnce:
        deploy:
          steps:
          
          - download: current
            artifact: drop-fakerestapi

          - task: Bash@3

            displayName: 'Selenium Tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                cd ~/
                DIR=/home/chaulnh/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/chaulnh/azagent/_work/1/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip app
                cd app
                unzip -o $(Build.BuildId)-fakerestapi.zip
                FILE=/home/chaulnh/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/chaulnh/app
                echo "Starting Selenium Tests"
                python3 functionTest.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."